// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phoneNumber    String?

  // Role-specific relations
  child  Child?
  parent Parent?
  admin  Admin?
}

enum Role {
  CHILD
  PARENT
  ADMIN
}

model Child {
  id             String  @id @default(uuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String  @unique
  avatar         String?
  bio            String?
  favoriteThings String?
  totalScore     Int     @default(0)

  enrollments  Enrollment[]
  groupMembers GroupMember[]
  parents      ChildParent[]
}

model Parent {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  children ChildParent[]
  payments Payment[]
  ratings  LessonRating[]
}

model Admin {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  lessons Lesson[]
  games   Game[]
}

model ChildParent {
  child    Child  @relation(fields: [childId], references: [id])
  childId  String
  parent   Parent @relation(fields: [parentId], references: [id])
  parentId String

  @@id([childId, parentId])
}

model Lesson {
  id          String   @id @default(uuid())
  title       String
  description String
  videoUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  admin   Admin  @relation(fields: [adminId], references: [id])
  adminId String

  enrollments Enrollment[]
  challenges  Challenge[]
  quizzes     Quiz[]
  ratings     LessonRating[]
  payments    Payment[]
}

model Game {
  id          String   @id @default(uuid())
  title       String
  description String
  gameUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  admin   Admin  @relation(fields: [adminId], references: [id])
  adminId String

  enrollments Enrollment[]
}

model Enrollment {
  id        String    @id @default(uuid())
  child     Child     @relation(fields: [childId], references: [id])
  childId   String
  lesson    Lesson?   @relation(fields: [lessonId], references: [id])
  lessonId  String?
  game      Game?     @relation(fields: [gameId], references: [id])
  gameId    String?
  score     Int       @default(0)
  completed Boolean   @default(false)
  startedAt DateTime  @default(now())
  endedAt   DateTime?

  @@unique([childId, lessonId])
  @@unique([childId, gameId])
}

model Challenge {
  id          String @id @default(uuid())
  title       String
  description String
  lesson      Lesson @relation(fields: [lessonId], references: [id])
  lessonId    String
}

model Quiz {
  id        String     @id @default(uuid())
  title     String
  lesson    Lesson     @relation(fields: [lessonId], references: [id])
  lessonId  String
  questions Question[]
}

model Question {
  id      String   @id @default(uuid())
  content String
  options String[]
  answer  String
  quiz    Quiz     @relation(fields: [quizId], references: [id])
  quizId  String
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Payment {
  id         String   @id @default(uuid())
  amount     Float
  status     PaymentStatus
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  paypackRef String   @unique

  parent     Parent   @relation(fields: [parentId], references: [id])
  parentId   String
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  lessonId   String
}

model LessonRating {
  id        String   @id @default(uuid())
  rating    Int
  feedback  String?
  createdAt DateTime @default(now())

  parent   Parent @relation(fields: [parentId], references: [id])
  parentId String
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String

  @@unique([parentId, lessonId])
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members GroupMember[]
}

model GroupMember {
  id       String   @id @default(uuid())
  joinedAt DateTime @default(now())

  child   Child  @relation(fields: [childId], references: [id])
  childId String
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  @@unique([childId, groupId])
}
